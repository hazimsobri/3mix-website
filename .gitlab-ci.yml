stages:
  - "build"
  - "deploy"

variables:
 # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

default:
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  before_script:
    - apk update && apk add bash && apk add wget openssh-client sshpass
  tags:
    - "k8s"

3mixWebsite:build:
  stage: build
  inherit:
    variables: true
    default: true 
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --no-cache -t $CI_REGISTRY_IMAGE/3mix:latest .
    - docker push $CI_REGISTRY_IMAGE/3mix:latest
  only:
    refs:
      - main
  when: manual


3MixWebsite:deploy:
  stage: deploy
  inherit:
    variables: true
    default: true 
  script:
    - echo "Logging into Docker Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

    - echo "Deploying application..."
    - |
      sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER <<-EOF

        echo "Logging into Docker Registry on the server..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

        echo "Pulling latest Docker image..."
        docker pull $CI_REGISTRY_IMAGE/3mix:latest

        echo "Stopping existing container if it exists..."
        docker stop web_container || true
        docker rm web_container || true

        echo "Starting new container..."
        docker run -d --name web_container -p 80:80 $CI_REGISTRY_IMAGE/3mix:latest
      EOF
  only:
    - main
  when: manual